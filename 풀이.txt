
문제 1번

// 배열의 삭제
// 다음 배열에서 400, 500을 삭제하는 code를 입력하세요

var nums = [100, 200, 300, 400, 500];

// pop 메서드 : 배열의 마지막 요소를 제거한 후, 제거한 요소를 반환

nums.pop();
nums.pop();
console.log(nums);


==================================================================

문제 2번

// 배열의 내장함수
// <pass> 부분에 배열 내장함수를 이용하여 코드를 입력하고 다음과 같이 출력되게 하세요.

var arr = [200, 100, 300];
// pass
arr.splice(2, 0, 10000);
// splice() 메서드는 배열의 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경합니다.
console.log(arr);

// 출력
// [200, 100, 10000, 300]

==================================================================

문제 3번

// 변수의 타입
// 다음 출력 값으로 올바른 것은?

var arr = [100, 200, 300];
console.log(typeof arr);

// 1) undefined = undefined
// 2) string = ""
// 3) number = 123
// 4) object = []

배열은 object 타입이므로 정답은 4번

==================================================================

문제 4번 

// 변수의 타입2
// 다음 변수 a를 typeof(a)로 넣었을 때 출력될 값과의 연결이 알맞지 않은 것은?

// 1) 입력: a = 1, 출력: number
// 2) 입력: a = 2.22, 출력: boolean
// 3) 입력: a = 'p', 출력: string
// 4) 입력: a = [1,2,3], 출력: object

2.22 = float 이므로 정답은 2번 

==================================================================

문제 5번

// for문 계산

// 다음 코드의 출력 값으로 알맞은 것은?

var a = 10;
var b = 2;

for (var i = 1; i < 5; i += 2) {
  a += i;
}

console.log(a + b);

1) 10 
2) 12
3) 14
4) 16

i < 5 이므로 i = 4

a(10) + i(4) + b(2) = 16
정답은 4번 

==================================================================

문제 6번 

// False

// 다음은 자바스크립트 문법 중에서 False로 취급하는 것들 입니다.
// 앗, False로 취급하지 않는 것이 하나 있네요! True를 찾아주세요.

// 1) NaN, 2) 1, 3) "", 4) 0, 5) undefined

boolean 타입같은 경우 
true = 1
false = 0
을 뜻하므로 정답은 2번 

==================================================================

문제 7번

// 변수명

// 다음 중 변수명으로 사용할 수 없는 것 2개를 고르시오

// 1) age, 2) &age, 3) let, 4) _age, 5) 1age

// 정답 3, 5번
// 변수명의 첫 글자는 특수문자, 영문으로 밖에 사용을 못한다
// 이 밖에도 예약된 키워드는 변수명으로 사용불가

==================================================================

문제 8번 

// 객체의 키 이름 중복

// 자바스크립트 객체를 다음과 같이 만들었다.
// 출력값을 입력하시오. (출력값은 공백을 넣지 않습니다.)

var d = {
  height: 100,
  weight: 78,
  weight: 84,
  temperatrue: 36,
  eyesight: 1,
};

console.log(d["weight"]);

// 정답) 84 => 코드는 위에서 아래로 흐르기 때문에 나중에 정의된 weight: 84가 출력됨

==================================================================

// concat을 활용한 출력 방법

const { concat } = require("rxjs");

// 다음 소스 코드를 완성하여 날짜와 시간을 출력하시오.

var year = "2019";
var month = "04";
var day = "26";
var hour = "11";
var minute = "34";
var second = "27";

var result = year.concat(
  "/",
  month,
  "/",
  day,
  " ",
  hour,
  ":",
  minute,
  ":",
  second
);

console.log(result);

//출력
// 2019/04/26 11:34:27

concat 함수는 
파라미터로 받은 배열이나 값들을 기존의 배열에 합쳐서,
새로운 배열을 만들어서 리턴합니다.

==================================================================

문제 10번 

// 별 찍기

// 크리스마스 날, 은비는 친구들과 함께 파티를 하기로 했다. 그런데, 크리스마스 트리를
// 사는 것을 깜빡하고 말았다. 온 가게를 돌아다녀 봤지만 크리스마스 트리는 모두 품절이었다.
// 하는 수 없이 은비는 프로그래밍으로 트리를 만들기로 한다.

// 은비를 위해 프로그램을 작성해 주세요.

// 입력 5

/* 출력
    *
   ***
  *****
 *******
*********
 */

const n = prompt("숫자를 입력하세요.");
// prompt 함수는 실행되었을 때 브라우저 창에 나타나기 때문에 터미널이 아닌 브라우저에서 확인 가능
let tree = "";

for (let i = 1; i <= n; i++) {
  let star = "";
  for (let j = 1; j <= n - i; j++) {
    star += " ";
  }
  for (let k = 1; k <= 2 * i - 1; k++) {
    star += "*";
  }
  tree += star + "\n";
}

console.log(tree);

n(입력값)은 5이고, i는 1부터 5까지 빈 문자열이 반복됨 

n = 5, i가 1일 경우 j = 4 
빈 문자열 한개와 띄어쓰기 4번이 차례대로 증가하며 반복됨

i가 1일 경우 k = 1 = *
i가 2일 경우 k = 3 = ***

차례대로 별찍기가 완성된다 
마지막 줄바꿈을 위해 /n 까지 더해주면 완성 

==================================================================

문제 11번 

// for를 이용한 기본 활용

// 1부터 100까지 모두 더하는 Code를 <pass> 부분에 완성하세요. for를 사용해야 합니다.

let s = 0;

// pass
for (let i = 1; i <= 100; i++) {
  s = s + i;
}

console.log(s);

i는 1로 시작해서 1씩 더해지며 100보다 작거나 같아진다.

이 수들을 s 에 더해 1 + 2 + 3 + 4 + 5 + ... 100 = 5050이 된다.

==================================================================

문제 12번

// 게임 캐릭터 클래스 만들기

/* 
다음 소스코드에서 클래스를 작성하여 게임 캐릭터의 능력치와
'파이어볼'이 출력되게 만드시오.
주어진 소스코드는 수정해선 안됩니다.
*/

// 데이터 작성
const Wizard = class Wizard {
  constructor(health, mana, armor) {
    this.health = health;
    this.mana = mana;
    this.armor = armor;
  }
  attack() {
    console.log("파이어볼");
  }
};

const x = new Wizard(545, 210, 10);
console.log(x.health, x.mana, x.armor);
x.attack();

/*
출력 
545 210 10
파이어볼
*/

constructor(생성자)를 통해 health, mana, armor 에 
값을 직접 적용? 하게끔 만들어준다.

==================================================================

문제 13번

// 몇 번째 행성인가요?

/* 
우리 태양계를 이루고 있는 행성은 수성, 금성, 지구, 화성,
목성, 토성, 천왕성, 해왕성으로 총 8개 입니다. 저희는 우리 
태양계의 n번째 행성이 무엇인지 알고 싶습니다. 

입력으로 행성의 순서를 나타내는 숫자 n이 입력됩니다. 
출력으로 그 순서에 해당하는 행성의 이름을 출력해주세요.

예로 1이 입력되면, 첫번째 행성인 수성이 출력됩니다.
*/

const arr = [
  "수성",
  "금성",
  "지구",
  "화성",
  "목성",
  "토성",
  "천왕성",
  "해왕성",
];

const n = prompt("숫자를 입력하세요.");

console.log(arr[n - 1]);

// 프로그래밍 언어는 0부터 시작하기 때문에 첫번째 행성인 수성의 배열은 0이다. 그러므로 -1을 통해 입력값에서 1을 뺸다면 1-1=0(수성)이 된다.
